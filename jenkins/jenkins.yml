AWSTemplateFormatVersion: "2010-09-09"

Parameters:
  NetworkStackParameter:
    Type: String
    Default: network
    Description: Network stack to deploy into.

Resources:

  JenkinsMasterSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Jenkins master instance (ssh & web traffic)
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      VpcId: 
        Fn::ImportValue: !Sub "${NetworkStackParameter}-VPC"

  JenkinsMasterLoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Jenkins master load balancer
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0
      VpcId: 
        Fn::ImportValue: !Sub "${NetworkStackParameter}-VPC"

  JenkinsMasterLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: JenkinsMasterLaunchTemplate
      LaunchTemplateData: 
        ImageId: ami-0e1a69c81175d6bf2
        InstanceType: t2.micro
        InstanceMarketOptions:
          MarketType: spot
          SpotOptions:
            MaxPrice: "0.005"

  JenkinsMaster:
    Type: AWS::EC2::Instance
    DependsOn:
      - JenkinsMasterLaunchTemplate
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          Install:
            - "InstallDocker"
            - "PullJenkinsImage"
            - "StartJenkinsContainer"
        InstallDocker:
          packages:
            yum:
              docker: []
          services:
            sysvinit:
              docker:
                enabled: "true"
                ensureRunning: "true"
                packages:
                  yum:
                    - "docker"
        PullJenkinsImage:
          commands:
            test:
              command: "docker pull jenkins/jenkins:lts"
        StartJenkinsContainer:
          commands:
            test:
              command: "docker run -d -p 80:8080 jenkins/jenkins:lts"
    Properties:
      SubnetId: 
        Fn::ImportValue: !Sub "${NetworkStackParameter}-Subnet1"
      LaunchTemplate:
        LaunchTemplateId:
          Ref: JenkinsMasterLaunchTemplate
        Version: 1
      SecurityGroupIds: [!Ref JenkinsMasterSecurityGroup]
      KeyName: ssh-laptop
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          
          yum install -y aws-cfn-bootstrap

          /opt/aws/bin/cfn-init -v \
            --stack ${ AWS::StackName } \
            --resource JenkinsMaster \
            --configsets Install \
            --region ${ AWS::Region }

  JenkinsLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets: 
        - Fn::ImportValue: !Sub  "${NetworkStackParameter}-Subnet1"
        - Fn::ImportValue: !Sub "${NetworkStackParameter}-Subnet2"
      SecurityGroups:
        - !Ref JenkinsMasterLoadBalancerSecurityGroup

  JenkinsLoadBalancerHTTPListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref JenkinsLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: redirect
          RedirectConfig:
            Host: '#{host}'
            Path: '/#{path}'
            Port: 443
            Protocol: HTTPS
            StatusCode: HTTP_301

  JenkinsLoadBalancerHTTPSListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref JenkinsLoadBalancer
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: arn:aws:acm:ap-southeast-2:365033114011:certificate/cb73021b-6107-47ec-8f0e-dc02dcb6ec25
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref JenkinsMasterTargetGroup

  JenkinsMasterTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 80
      Protocol: HTTP
      TargetType: ip
      Targets:
        - Id: !GetAtt JenkinsMaster.PrivateIp
          Port: 80
      VpcId: 
        Fn::ImportValue: !Sub "${NetworkStackParameter}-VPC"
      HealthCheckPath: /login

  JenkinsRecordSetGroup:
    Type: 'AWS::Route53::RecordSetGroup'
    DependsOn:
      - JenkinsMasterLaunchTemplate
    Properties:
      HostedZoneId: ZT0O09PTBTJOV
      RecordSets:
        - Name: jenkins.morleystuff.com
          Type: A
          AliasTarget:
            DNSName: !GetAtt JenkinsLoadBalancer.DNSName
            HostedZoneId: !GetAtt JenkinsLoadBalancer.CanonicalHostedZoneID
